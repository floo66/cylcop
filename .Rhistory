plot(seq(0,max(x),length.out = 200), true_dens, type = "l")
lines(dens1$x, dens1$y, col = "red")
lines(dens2$x, dens2$y, col = "green")
max(x)
x <- rweibull(n, shape = 10)
bw1 <- opt_lin_bw(x = x, loss="adhoc")
bw2 <- opt_lin_bw(x = x, loss="KullbackLeibler")
dens1 <- fit_steplength(x = x, parametric = FALSE, bandwidth = bw1)
dens2 <- fit_steplength(x = x, parametric = FALSE, bandwidth = bw2)
true_dens <- dweibull(seq(0,max(x),length.out = 200), shape = 0.4)
plot(seq(0,max(x),length.out = 200), true_dens, type = "l")
lines(dens1$x, dens1$y, col = "red")
lines(dens2$x, dens2$y, col = "green")
true_dens <- dweibull(seq(0,max(x),length.out = 200), shape = 10)
plot(seq(0,max(x),length.out = 200), true_dens, type = "l")
lines(dens1$x, dens1$y, col = "red")
lines(dens2$x, dens2$y, col = "green")
n <- 1000
x <- rweibull(n, shape = 10)
bw1 <- opt_lin_bw(x = x, loss="adhoc")
bw2 <- opt_lin_bw(x = x, loss="KullbackLeibler")
dens1 <- fit_steplength(x = x, parametric = FALSE, bandwidth = bw1)
dens2 <- fit_steplength(x = x, parametric = FALSE, bandwidth = bw2)
true_dens <- dweibull(seq(0,max(x),length.out = 200), shape = 10)
plot(seq(0,max(x),length.out = 200), true_dens, type = "l")
lines(dens1$x, dens1$y, col = "red")
lines(dens2$x, dens2$y, col = "green")
?density.circular
n <- 1000  #n (number of samples) is set small for performance. Increase n to
angles <- as.double(circular::rmixedvonmises(n, mu1 = circular(0), mu2 = circular(pi), kappa1 = 2, kappa2 = 1, prop = 0.5))
bw <- opt_circ_bw(theta = angles, loss="adhoc", kappa.est = "trigmoments")
dens_non_param <- fit_angle(theta = angles, parametric = FALSE, bandwidth = bw)
n <- 100  #n (number of samples) is set small for performance. Increase n to
# a value larger than 1000 to see the effects of multimodality
angles <- as.double(circular::rmixedvonmises(n, mu1 = circular(0), mu2 = circular(pi), kappa1 = 2, kappa2 = 1, prop = 0.5))
bw <- opt_circ_bw(theta = angles, loss="adhoc", kappa.est = "trigmoments")
dens_non_param <- fit_angle(theta = angles, parametric = FALSE, bandwidth = bw)
dens <- fit_angle(theta = angles, parametric = "mixedvonmises")
dens_fixed <- fit_angle(theta = angles, parametric = "mixedvonmises", mu = c(0, pi))
cylcop_get_option()
cylcop_get_option("silent")
dens <- fit_angle(theta = angles, parametric = "mixedvonmises")
dens
silent_curr <- cylcop_get_option("silent")
cylcop_set_option(silent = T)
n <- 100  #n (number of samples) is set small for performance. Increase n to
# a value larger than 1000 to see the effects of multimodality
angles <- as.double(circular::rmixedvonmises(n, mu1 = circular(0), mu2 = circular(pi), kappa1 = 2, kappa2 = 1, prop = 0.5))
bw <- opt_circ_bw(theta = angles, loss="adhoc", kappa.est = "trigmoments")
dens_non_param <- fit_angle(theta = angles, parametric = FALSE, bandwidth = bw)
dens_estimate <- fit_angle(theta = angles, parametric = "mixedvonmises")
dens_estimate_fixed_mean <- fit_angle(theta = angles, parametric = "mixedvonmises", mu = c(0, pi))
true_dens <- circular::dmixedvonmises(circular(seq(-pi,pi,0.001)), mu1 = circular(0), mu2 = circular(pi), kappa1 = 2, kappa2 = 1, prop = 0.5)
dens <- circular::dmixedvonmises(circular(seq(-pi,pi,0.001)), mu1 = circular(dens_estimate$coef$mu1), mu2 = circular(dens_estimate$coef$mu2), kappa1 = dens_estimate$coef$kappa1, kappa2 = dens_estimate$coef$kappa2, prop = dens_estimate$coef$prop)
dens_fixed_mean <- circular::dmixedvonmises(circular(seq(-pi,pi,0.001)), mu1 = circular(dens_estimate_fixed_mean$coef$mu1), mu2 = circular(dens_estimate_fixed_mean$coef$mu2), kappa1 = dens_estimate_fixed_mean$coef$kappa1, kappa2 = dens_estimate_fixed_mean$coef$kappa2, prop = dens_estimate_fixed_mean$coef$prop)
plot(seq(-pi, pi, 0.001), true_dens, type = "l")
lines(as.double(dens_non_param$x), as.double(dens_non_param$y), col = "red")
lines(seq(-pi, pi, 0.001), dens, , col = "green")
lines(seq(-pi, pi, 0.001), dens_fixed_mean, , col = "blue")
n <- 1000  #n (number of samples) is set small for performance. Increase n to
# a value larger than 1000 to see the effects of multimodality
angles <- as.double(circular::rmixedvonmises(n, mu1 = circular(0), mu2 = circular(pi), kappa1 = 2, kappa2 = 1, prop = 0.5))
bw <- opt_circ_bw(theta = angles, loss="adhoc", kappa.est = "trigmoments")
dens_non_param <- fit_angle(theta = angles, parametric = FALSE, bandwidth = bw)
dens_estimate <- fit_angle(theta = angles, parametric = "mixedvonmises")
dens_estimate_fixed_mean <- fit_angle(theta = angles, parametric = "mixedvonmises", mu = c(0, pi))
true_dens <- circular::dmixedvonmises(circular(seq(-pi,pi,0.001)), mu1 = circular(0), mu2 = circular(pi), kappa1 = 2, kappa2 = 1, prop = 0.5)
dens <- circular::dmixedvonmises(circular(seq(-pi,pi,0.001)), mu1 = circular(dens_estimate$coef$mu1), mu2 = circular(dens_estimate$coef$mu2), kappa1 = dens_estimate$coef$kappa1, kappa2 = dens_estimate$coef$kappa2, prop = dens_estimate$coef$prop)
dens_fixed_mean <- circular::dmixedvonmises(circular(seq(-pi,pi,0.001)), mu1 = circular(dens_estimate_fixed_mean$coef$mu1), mu2 = circular(dens_estimate_fixed_mean$coef$mu2), kappa1 = dens_estimate_fixed_mean$coef$kappa1, kappa2 = dens_estimate_fixed_mean$coef$kappa2, prop = dens_estimate_fixed_mean$coef$prop)
plot(seq(-pi, pi, 0.001), true_dens, type = "l")
lines(as.double(dens_non_param$x), as.double(dens_non_param$y), col = "red")
lines(seq(-pi, pi, 0.001), dens, , col = "green")
lines(seq(-pi, pi, 0.001), dens_fixed_mean, , col = "blue")
cylcop_set_option(silent = silent_curr)
cylcop_get_option("silent")
?GoFKernel::density.reflected
rgamma(3,2,5)
silent_curr <- cylcop_get_option("silent")
cylcop_set_option(silent = T)
n <- 100
n <- 10000
x <- rweibull(n, shape = 10)
dens_weibull <- fit_steplength(x = x, parametric = "weibull")
dens_gamma <- fit_steplength(x = x, parametric = "gamma", start = c())
dens_gamma
warnings()
?MASS::fitdistr
x <- rweibull(n, shape = 10)
MASS::fitdistr(x, densfun = Ã weibull)
MASS::fitdistr(x, densfun = "weibull")
MASS::fitdistr(x, densfun = "weibull", traceopt=T)
?optim
MASS::fitdistr(x, densfun = "weibull", control=list(trace=T))
MASS::fitdistr(x, densfun = "weibull", lower = 0, upper=1)
MASS::fitdistr(x, densfun = "weibull", start=list(shape=10, scale=1))
MASS::fitdistr(x, densfun = "weibull", start=list(shape=10, scale=1), lower=c(0,0))
MASS::fitdistr(x, densfun = "gamma")
MASS::fitdistr(x, densfun = "beta")
MASS::fitdistr(x, densfun = "beta")
MASS::fitdistr(x, densfun = "cauchy")
MASS::fitdistr(x, densfun = "beta")
MASS::fitdistr(x, densfun = "chisq")
MASS::fitdistr(x, densfun = "chi-squared")
MASS::fitdistr(x, densfun = "exponential")
MASS::fitdistr(x, densfun = "gamma")
MASS::fitdistr(x, densfun = "lognormal")
MASS::fitdistr(x, densfun = "logistic")
MASS::fitdistr(x, densfun = "normal")
MASS::fitdistr(x, densfun = "t")
warnings()
MASS::fitdistr(x, densfun = "lognormal")
MASS::fitdistr(x, densfun = "chi-squared")
?rbeta()
?rchisq()
MASS::fitdistr(x, densfun = "chi-squared",start=list(df=2))
MASS::fitdistr(x, densfun = "chi-squared",start=list(df=2),method="Brent")
MASS::fitdistr(x, densfun = "chi-squared",start=list(df=2),method="Brent",lower=0)
MASS::fitdistr(x, densfun = "beta",start=list(shape1=1, shape2 =1))
MASS::fitdistr(x, densfun = "beta",start=list(shape1=1, shape2 =5))
MASS::fitdistr(x, densfun = "beta",start=list(shape1=5, shape2 =5))
MASS::fitdistr(x, densfun = "beta",start=list(shape1=5, shape2 =2))
MASS::fitdistr(x, densfun = "beta",start=list(shape1=2, shape2 =2))
MASS::fitdistr(x, densfun = "beta",start=list(shape1=2, shape2 =5))
MASS::fitdistr(x, densfun = "beta",start=list(shape1=5, shape2 =1))
MASS::fitdistr(x, densfun = "chisq")
MASS::fitdistr(x, densfun = "chi-squared")
MASS::fitdistr(x, densfun = "chisq", start=1)
MASS::fitdistr(x, densfun = "chi-squared", start=1)
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1))
?optim
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="Brent")
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="Brent", lower=1)
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="Brent", lower=1, upper=10)
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="Brent", lower=1, upper=4)
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="Brent", lower=1, upper=2)
?fitdistr
x3 <- rweibull(100, shape = 4, scale = 100)
fitdistr(x3, "weibull")
MASS::fitdistr(x3, "weibull")
beta_mom <- function(x) {
m_x <- mean(x, na.rm = TRUE)
s_x <- sd(x, na.rm = TRUE)
alpha <- m_x*((m_x*(1 - m_x)/s_x^2) - 1)
beta <- (1 - m_x)*((m_x*(1 - m_x)/s_x^2) - 1)
return(list(alpha = alpha, beta = beta))
}
beta_mom(x)
MASS::fitdistr(x, densfun = "beta",start=list(shape1=2.394, shape2 =0.1179))
install.packages("fitdistrplus"
install.packages("fitdistrplus")
?fitdistrplus::fitdist()
?fitdistrplus::fitdist(x, distr="beta")
fitdistrplus::fitdist(x, distr="beta")
x_temp <- x/max(x)
fitdistrplus::fitdist(x_temp, distr="beta")
plot(x_temp)
MASS::fitdistr(x_temp, distr="beta")
MASS::fitdistr(x_temp, densfun="beta")
beta_mom(x_temp)
MASS::fitdistr(x_temp, densfun="beta", start = list(shape1= 16.511, shape2 = 5.27)
MASS::fitdistr(x_temp, densfun="beta", start = list(shape1= 16.511, shape2 = 5.27))
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="BFGS", lower=1)
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="BFGS")
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="BFGS")
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="BFGS")
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="BFGS")
MASS::fitdistr(x, densfun = "chi-squared", start=list(df=1), method="BFGS")
library(cylcop)
n <- 10000
x <- rweibull(n, shape = 10)
dens_weibull <- fit_steplength(x = x, parametric = "weibull")
dens_weibull
dens_weibull <- fit_steplength(x = x, parametric = "chi-squared")
library(cylcop)
dens_weibull <- fit_steplength(x = x, parametric = "chi-squared")
dens_weibull <- fit_steplength(x = x, parametric = "chi-squared", start=list(df=3))
dens_weibull <- fit_steplength(x = x, parametric = "chi-squared", start=list(df=2))
dens_weibull <- fit_steplength(x = x, parametric = "chi-squared", start=list(df=1))
x
dens_weibull <- fit_steplength(x = x, parametric = "gamma")
distr <- MASS::fitdistr(x, densfun = parametric, start = start, lower=NULL)
distr <- MASS::fitdistr(x, densfun = "chi-squared", start = start, lower=NULL)
distr <- MASS::fitdistr(x, densfun = "chi-squared", start = list(df=1), lower=NULL)
distr <- MASS::fitdistr(x, densfun = "chi-squared", start = list(df=1))
distr <- MASS::fitdistr(x, densfun = "chi-squared", start = list(df=1), method="BFGS")
distr
library(cylcop)
x
dens_weibull <- fit_steplength(x = x, parametric = "weibull")
dens_gamma <- fit_steplength(x = x, parametric = "gamma", start = c())
dens_gamma <- fit_steplength(x = x, parametric = "gamma")
dens_chisq <- fit_steplength(x = x, parametric = "chi-squared", start=list(df =1))
dens_chisq <- fit_steplength(x = x, parametric = "chi-squared", start=list(df = 4))
dens_chisq <- fit_steplength(x = x, parametric = "chi-squared", start=list(df = 3))
dens_chisq <- fit_steplength(x = x, parametric = "chi-squared", start=list(df = dens_chisq ))
dens_chisq
dens_chisq <- fit_steplength(x = x, parametric = "chi-squared", start=list(df = 1 ))
weibull <- fit_steplength(x = x, parametric = "weibull")
weibull
weibull$coef
gamma <- fit_steplength(x = x, parametric = "gamma")
gamma$coef
chisq <- fit_steplength(x = x, parametric = "chi-squared", start = list(df = 1))
silent_curr <- cylcop_get_option("silent")
cylcop_set_option(silent = T)
n <- 10000
x <- rweibull(n, shape = 10)
dens_non_param <- fit_steplength(x = x, parametric = FALSE)
weibull <- fit_steplength(x = x, parametric = "weibull")
gamma <- fit_steplength(x = x, parametric = "gamma")
chisq <- fit_steplength(x = x, parametric = "chi-squared", start = list(df = 1))
true_dens <- dweibull(seq(0, max(x), length.out = 200), shape = 10)
dens_weibull <- dweibull(seq(0, max(x),length.out = 200), shape = weibull$coef$shape, scale = weibull$coef$scale)
dens_gamma <- dgamma(seq(0, max(x),length.out = 200), shape = gamma$coef$shape, rate = gamma$coef$rate)
dens_chisq <- dchisq(seq(0, max(x),length.out = 200), df = chisq$coef$df)
plot(seq(0,max(x),length.out = 200), true_dens, type = "l")
lines(dens_non_param$x, dens_non_param$y, col = "red")
lines(seq(0,max(x),length.out = 200), dens_weibull, col = "green")
lines(seq(0,max(x),length.out = 200), dens_gamma, col = "blue")
lines(seq(0,max(x),length.out = 200), dens_chisq, col = "cyan")
cylcop_set_option(silent = silent_curr)
?MASS::fitdistr
?rmixedvonmises
qmixedvonmises(p = c(0.1, 0.8), mu1 = 0, mu2 = pi, kappa1 = 1, kappa2 = 3, prop = 0.4)
qmixedvonmises(p = c(0.1, 0.8), mu1 = 0, mu2 = pi, kappa1 = 1, kappa2 = 3, prop = 0.4)
memory(x)
memory(x)?stats::spline()
?stats::spline()
?mle.wrappednormal
n <- 1000
angles <- as.double(circular::rmixedvonmises(n, mu1 = circular(0), mu2 = circular(pi), kappa1 = 2, kappa2 = 1, prop = 0.5))
mle.mixedvonmises(theta = angles)
mle.mixedvonmises(theta = angles)
mle.mixedvonmises(theta = angles, mu = c(0, pi))
n <- 1000
angles <- as.double(circular::rmixedvonmises(n, mu1 = circular(0), mu2 = circular(pi), kappa1 = 2, kappa2 = 1, prop = 0.5))
mle.mixedvonmises(theta = angles)
mle.mixedvonmises(theta = angles, mu = c(0, pi))
n <- 1000
angles <- as.double(circular::rmixedvonmises(n, mu1 = circular(0), mu2 = circular(pi), kappa1 = 2, kappa2 = 1, prop = 0.4))
mle.mixedvonmises(theta = angles)
mle.mixedvonmises(theta = angles, mu = c(0, pi))
?rnorm
?copula::pCopula
?dwrappedcauchy()
?dwrappedcauchy()
cylcop::rwrappedcauchy(10, location = 0, scale 3)
cylcop::rwrappedcauchy(10, location = 0, scale=3)
cylcop::rwrappedcauchy(10, location = 0, scale = 3)
library(cylcop)
cop_plot(cyl_quadsec(0.1), type="pdf", plot_type="plotly", n_gridlines = 20)
cop_plot(copula::claytonCopula(4), type="pdf", plot_type="plotly", n_gridlines = 20)
library(cylcop)
cop_plot(copula::claytonCopula(4), type="pdf", plot_type="plotly", n_gridlines = 20)
library(cylcop)
cop_plot(copula::claytonCopula(4), type="pdf", plot_type="plotly", n_gridlines = 20)
cop_plot(copula::frankCopula(4), type="pdf", plot_type="plotly", n_gridlines = 20)
library(cylcop)
?ddens
?qwrappedcauchy
R CMD check --as-cran
?devtool::check
?devtools::check
#' @examples cop <- cyl_quadsec(0.1)
cop <- cyl_quadsec(0.1)
cylcop::cCopula(u = c(0.1, 0.5), copula = cop, cond_on = 1, inverse = FALSE)
cylcop::cCopula(u = rbind(c(0.1, 0.5), c(0.4, 0.2)), copula = cop, cond_on = 2, inverse = TRUE)
??density.reflected
?`cyl_quadsec-class`
?copula::`A,galambosCopula-method`
?ggplot
library(cylcop)
?circ_plot
?circular::qvonmises()
?circular::bw.cv.ml.circular
?set.seed
set.seed(123)
rnorm(2)
set.seed(123)
rnorm(2)
rnorm(2)
cop <- cyl_rect_combine(copula::frankCopula(2))
cop_plot(copula = cop, type = "pdf", plot_type = "ggplot", resolution = 20)
cop <- cyl_rect_combine(copula::frankCopula(2), low_rect = c(0, 0.3),
cop <- cyl_rect_combine(copula::frankCopula(2),
cop <- cyl_rect_combine(copula::frankCopula(2), low_rect = c(0, 0.3), up_rect = "symmetric", flip_up = F)
cop_plot(copula = cop, type = "pdf", plot_type = "ggplot", resolution = 20)
cop <- cyl_rect_combine(copula::frankCopula(2))
cop_plot(copula = cop, type = "pdf", plot_type = "ggplot", resolution = 20)
cop <- cyl_rect_combine(copula::frankCopula(2), low_rect = c(0, 0.3), up_rect = "symmetric", flip_up = F)
cop_plot(copula = cop, type = "pdf", plot_type = "ggplot", resolution = 20)
cylcop_get_option(silent)
cylcop_get_option("silent")
cylcop_get_option()
?`cyl_rot_combine-class`
?copula::`acopula-class`
?prob
?`cyl_copula-class`
?copula::`plot,Copula,ANY-method
?copula::`plot,Copula,ANY-method`
show(cyl_quadsec())
cyl_quadsec()
library(cylcop)
?show
?prop
?prob
?cylcop::`prob,cyl_copula-method`
?cylcop::prob
library(cylcop)
?prob
?show
?cylcop::`show,cyl_copula-method`
library(cylcop)
?show
?show
copula::frankCopula()
sample <- rCopula(100,cyl_quadsec(0.1))
optML(copula = cyl_quadsec(),
optML(copula = cyl_quadsec(),
theta = sample[,1],
x = sample[,2],
parameters = "a",
start = 0
)
optML(copula = cyl_rect_combine(copula::frankCopula()),
theta = sample[,1],
x = sample[,2],
parameters = "a",
start = 0
)
cyl_rect_combine(copula::frankCopula())
optML(copula = cyl_rect_combine(copula::frankCopula()),
theta = sample[,1],
x = sample[,2],
parameters = "alpha",
start = 0
)
optML(copula = cyl_rect_combine(copula::frankCopula()),
theta = sample[,1],
x = sample[,2],
parameters = "alpha",
start = 1
)
rwrappedcauchy(10, location = 0, scale =3)
#' @examples require(circular)
require(circular)
rwrappedcauchy(10, location = 0, scale =3)
?rwrappedcauchy
?show
library(cylcop)
?show
?`show,cyl_copula-method`
?`show-methods
?`show,ANY-method`
?`show-methods`
library(cylcop)
?`show,cyl_copula-method`
?`show,cyl_rect_combine-method`
?`show,cyl_rot_combine-method`
library(cylcop)
?`show,cyl_copula-method`
?`show,cyl_rect_combine-method`
?`show,cyl_rot_combine-method`
library(cylcop)
?`show,cyl_copula-method`
?cCopula
?dCopula
copula::cCopula
library(cylcop)
copula::dCopula
copula::cCopula
copula::dCopula
copula::pCopula
copula::rCopula
library(cylcop)
?pcylcop
?pcylcop
?pCopula
library(cylcop)
?pcylcop
library(cylcop)
?rcylcop
library(cylcop)
library(cylcop)
?dcylcop
?Cylcop
?Cylcop
library(cylcop)
?dcylcop
?cylcop_set_option
?cylcop::`ccylcop,cyl_quadsec-method`
library(cylcop)
?optCor
samplerCopula(1000, cyl_vonmises)
samplerCopula(1000, cyl_vonmises())
rCopula(1000, cyl_vonmises())
library(cylcop)
rcylcop(1000, cyl_vonmises())
sample <- rcylcop(1000, cyl_vonmises())
sample
optCor(cyl_vonmises(mu=0),theta = sample[,1],x=sample[,2])
optCor(cyl_vonmises(mu=pi),theta = sample[,1],x=sample[,2])
sample0 <- rcylcop(10000, cyl_vonmises(mu=0))
samplepi <- cylcop(1000, cyl_vonmises(mu=pi))
samplepi <- cylcop(1000, cyl_vonmises(mu=pi))
samplepi <- rcylcop(1000, cyl_vonmises(mu=pi))
mi_cyl(theta=sample0[,1], x=sample[,2])
mi_cyl(theta=sample0[,1], x=sample0[,2])
mi_cyl(theta=samplepi[,1], x=samplepi[,2])
cor_cyl(theta=samplepi[,1], x=samplepi[,2])
cor_cyl(theta=sample0[,1], x=sample0[,2])
samplepi <- cylcop(10000, cyl_vonmises(mu=pi))
samplepi
samplepi <- rcylcop(10000, cyl_vonmises(mu=pi))
sample0 <- rcylcop(10000, cyl_vonmises(mu=0))
cor_cyl(theta=samplepi[,1], x=samplepi[,2])
cor_cyl(theta=sample0[,1], x=sample0[,2])
mi_cyl(theta=samplepi[,1], x=samplepi[,2])
mi_cyl(theta=sample0[,1], x=sample0[,2])
mi_cyl(theta=sample0[,1], x=sample0[,2],normalize = T)
mi_cyl(theta=sample0[,1], x=sample0[,2],normalize = F)
mi_cyl(theta=samplepi[,1], x=samplepi[,2],normalize = F)
sample <- rcylcop(10000,cyl_rot_combine(copula::frankCopula(2)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(2)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(2)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(2)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(2)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(2)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(2)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(10)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(0.3)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(0.3)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(0.3)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(4)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rot_combine(copula::claytonCopula(4)))
cor_cyl(sample[,1],sample[,2])
sample <- rcylcop(10000,cyl_rect_combine(copula::claytonCopula(4)))
sample <- rcylcop(10000,cyl_rect_combine(copula::claytonCopula(2)))
sample <- rcylcop(10000,cyl_rot_combine(copula::frankCopula(4)))
sample <- rcylcop(10000,cyl_rect_combine(copula::frankCopula(2)))
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2])
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], n = 1000)
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], n = 100)
sample <- rcylcop(100,cyl_rot_combine(copula::frankCopula(4)))
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], n = 100)
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], n = 100)
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2])
sample <- rcylcop(1000,cyl_rect_combine(copula::frankCopula(2)))
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2])
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], method = "tau")
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], method = "tau")
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], method = "tau")
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], method = "tau")
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2])
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], method = "mi_cyl")
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], method = "mi_cyl",)
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], method = "mi_cyl", n=1000)
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], method = "mi_cyl", n=1000)
optCor(cyl_rect_combine(copula::frankCopula()), theta = sample[,1], x = sample[,2], method = "mi_cyl", n=1000)
optCor(cyl_rect_combine(copula::claytonCopula()), theta = sample[,1], x = sample[,2], method = "mi_cyl", n=1000)
optCor(cyl_rect_combine(copula::claytonCopula()), theta = sample[,1], x = sample[,2], method = "tau")
optCor(cylquadsec(), theta = sample[,1], x = sample[,2], method = "tau")
optCor(cylquadsec(), theta = sample[,1], x = sample[,2], method = "mi_cyl")
options()$warning
options(warning=0)
optCor(cylquadsec(), theta = sample[,1], x = sample[,2], method = "mi_cyl")
options(warning=0)
library(devtooles)
library(devtools)
?devtools::build()
usethis::use_readme_rmd()
usethis::use_news_md()
usethis::use_cran_comments()
devtools::revdep_check()
?devtools::revdep()
revdep()
?use_gpl_license()
use_gpl_license(version = 3, include_future = TRUE)
use_gpl_license(version = 2, include_future = TRUE)
?release
release(check=T)
?cor_cyl
library(cylcop)
cor_cyl
?cor_cyl
library(devtools)
release_checks()
release(check=T)
library(devtools)
release(check = T)
?cor_cyl
library(cylcop)
?cor_cyl
library(devtools)
release()
release(check=T)
library(devtools)
release(check=T)
?check_rhub
check_rhub()
