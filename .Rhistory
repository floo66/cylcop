library(cylcop)
error_sound()
if(.Platform$OS.type=="windows")
sound::setWavPlayer(system.file("sound", "wv_player.exe", package = "cylcop")) else
sound::setWavPlayer("afplay")
error_sound()
sound::play((system.file("sound", "error.wav", package = "cylcop"))
sound::play(system.file("sound", "error.wav", package = "cylcop"))
system.file("sound", "error.wav", package = "cylcop")
base::system.file("sound", "error.wav", package = "cylcop")
devtools::system.file("sound", "error.wav", package = "cylcop")
devtools::system.file("sound", "error.wav", package = "cylcop")
usethis::system.file("sound", "error.wav", package = "cylcop")
?system.file()
.libPaths()
load("~/ETH/pop_eco/copula/pkg/cylcop/sound.RData")
getwd()
install("cylcop")
remove.packages("cylcop")
install("cylcop")
library(cylcop)
error_sound()
rm(list=ls())
error_sound()
done_sound()
getwd()
setwd("C:/Users/Flo/Documents/ETH/pop_eco/copula")
library(cylcop)
error_sound()
system.file("extdata", "wv_player.exe", package = "cylcop")
if(.Platform$OS.type=="windows")
sound::setWavPlayer(system.file("extdata", "wv_player.exe", package = "cylcop")) else
sound::setWavPlayer("afplay")
error_sound()
error_sound()
error_sound()
error_sound()
error_sound
happiness
happiness == T
cylcop::happiness == T
happiness == Tsystem.file("extdata", "error.wav",
package = "cylcop")
system.file("extdata", "error.wav",
package = "cylcop")
sound::play("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/error.wav")
sound::play("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/error.wav")
sound::play("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/donne.wav")
sound::play("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/done.wav")
system.file("extdata", "wv_player.exe", package = "cylcop")
sound::setWavPlayer()
sound::setWavPlayer("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/wv_player.exe")
sound::play("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/done.wav")
sound::play("C:/Users/Flo/Documents/ETH/pop_eco/copula/source/sound/done.wav")
sound::play("C:/Users/Flo/Documents/ETH/pop_eco/copula/source/sound/done.wav")
sound::play("C:/Users/Flo/Documents/ETH/pop_eco/copula/source/sound/doe.wav")
sound::play("C:/Users/Flo/Documents/ETH/pop_eco/copula/source/sound/done.wav")
sound::play("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/done.wav")
error_sound()
remove.packages("cylcop")
getwd()
setwd("pkg")
getwd()
install("cylcop")
library(devtools)
install("cylcop")
remove.package("cylcop")
uninstall("cylcop")
install("cylcop")
install("cylcop")
library(cylcop)
error_sound()
system.file("extdata", "done.wav", package = "cylcop")
ound::play(system.file("extdata", "done.wav", package = "cylcop"))
sound::play(system.file("extdata", "done.wav", package = "cylcop"))
sound::play(system.file("extdata", "waiting.wav", package = "cylcop"))
sound::play(system.file("extdata", "waiting.wav", package = "cylcop"))
sound::play(system.file("extdata", "waiting2.wav", package = "cylcop"))
system.file("extdata", "waiting2.wav", package = "cylcop")
sound::play("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/waiting.wav")
sound::play("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/waiting2.wav")
sound::play("C:/Program Files/R/R-3.6.1/library/cylcop/waiting2.wav")
sound::play("C:/Program Files/R/R-3.6.1/library/waiting2.wav")
sound::play("C:/Program Files/R/R-3.6.1/waiting2.wav")
sound::play("C:/Program Files/R/waiting2.wav")
sound::play("C:/Users/Flo/waiting2.wav")
sound::play(sound::sound("C:/Users/Flo/waiting2.wav"))
sound("C:/Users/Flo/waiting2.wav")
sound::sound("C:/Users/Flo/waiting2.wav")
temp<-sound::sound("C:/Users/Flo/waiting2.wav")
sound::play(temp)
temp<-sound::loadSample("C:/Users/Flo/waiting2.wav")
sound::play(temp)
sound::play(sound::loadSample("C:/Users/Flo/waiting2.wav"))
system.file("extdata", "done.wav", package = "cylcop")
temp<-sound::loadSample("C:/Program Files/R/R-3.6.1/library/cylcop/extdata/done.wav")
temp
sound::play(temp)
devtools::uninstall("cylcop")
remove.packages("cylcop")
install("cylcop")
library(devtools)
install("cylcop")
getwd()
setwd("..")
getwd()
install("cylcop")
rm(list=ls())
library(cylcop)
library(cylcop)
uninstall("cylcop")
install("cylcop")
library(cylcop)
error_sound()
remove.packages("cylcop")
library(devtools)
getwd()
setwd("..")
install("cylcop")
library(cylcop)
error_sound()
warning_sound()
waiting_sound()
done_sound()
done_sound()
?cylcop
?done_sound
make_traj(10,marginal_circ = "vonmises", parameter_circ = list(mu=0, kappa=3), marginal_lin = "gamma", parameter_lin = )
make_traj(10,marginal_circ = "vonmises", parameter_circ = list(mu=0, kappa=3), marginal_lin = "gamma", parameter_lin = list(shape=3), copula = cyl_cubsec())
?get()
?apropos()
marg_type="norm"
paste0("d", marg_type) %>% get()
get(paste0("d", marg_type))
get("dnorm")
dnorm
get("dvonmises")
?dnorm
?get
match.fun
?match.fun
match.fun("dnorm")
match.fun("dvonmises")
get("dvonmises",circular)
})
get("dvonmises",circular)
get("dvonmises",envir = circular)
get("dvonmises",pos = circular)
pkg_env_name(circular)
rlang::pkg_env_name(circular)
rlang::pkg_env_name("circular")
get("dvonmises",pos = "package:circular")
get("dvonmises",envir =  "package:circular")
get("dvonmises",envir = "package:circular")
get("dvonmises",envir = "circular")
rlang::pkg_env("circular")
library circular
library(circular)
rlang::pkg_env("circular")
get("dvonmises",envir = "circular")
get("dvonmises")
get("dvonmises",envir = rlang::pkg_env("circular"))
get("dvonmises",envir = c(rlang::pkg_env("circular"), rlang::pkg_env("stats")))
rlang::pkg_env_name("circular")
get_marg("norm")
get_marg("gamma")
get_marg("vonmises")
get_marg("hnorm")
??hnorm
extraDistr::rhnorm
get_marg("extraDistr::rhnorm")
get("extraDistr::rhnorm")
extraDistr::rhnorm
ls("extraDistr::rhnorm")
lsf.str("extraDistr::rhnorm")
lsf.str("extraDistr::rhnorm")
?rvonmises
search()
lsf.str("package:ts")
lsf.str("circular:rvonmises")
search()
get("rvonmises")
lsf.str("package:circular")
lsf.str("package:stats")
lsf.str("package::stats")
circular::dvonmises()
remove.packages("cylcop")
getwd()
library(devtools)
install("cylcop")
setwd("..")
install("cylcop")
library(cylcop)
get_marg("norm")
get_marg("vonmises")
rvonmises()
?stats
library(help = "stats")
?rgamma
?GammaDist
remove.package("cylcop")
remove.packages("cylcop")
library(devtools)
getwd
getwd90
getwd()
setwd("..")
install("cylcop")
install(cylcop)
getwd()
install("cylcop")
setwd("C:/Users/Flo/Documents/ETH/pop_eco/copula/pkg/cylcop")
setwd("..")
getwd()
install("cylcop")
library(devtools)
install("cylcop")
remove.packages("cylcop")
library(cylcop)
error_sound()
library(devtools)
getwd()
setwd("..")
install("cylcop")
?copula::profile
?copula::profile
copula::profile()
copula::logLik
stats::logLik
remove.packages("cylcop")
getwd()
setwd("..")
library(devtools)
install("cylcop")
library(cylcop)
error_sound()
waiting_sound()
done_sound()
warning_sound()
error_sound()
get_marg("rnorm")
get_marg("norm")
get_marg("hnorm")
get_marg("vonmises")
get_marg("gamma")
get_marg("beta")
extraDistr::rhnorm()
?extraDistr::rhnorm()
copClayton
cop <- cyl_cubsec()
cop
traj<-make_traj(10, cop, marginal_circ = "vonmises", parameter_circ = list(mu=0, kappa=4),marginal_lin = "gamma", parameter_lin = list(shape=2))
traj
traj<-make_traj(10000, cop, marginal_circ = "vonmises", parameter_circ = list(mu=0, kappa=4),marginal_lin = "gamma", parameter_lin = list(shape=2))
scat_plot(traj)
scat_plot(traj, periodic=T)
circ_plot(traj)
traj_plot(traj)
cop_scat_plot(traj)
?cop_plot
cop_plot(cop, type="cdf")
cop_plot(cop, type="pdf")
cop_plot(cop, type="pdf", plot_type = "plotly")
cop_plot(cop, type="pdf", plot_type = "plotly", resolution = 100, n_gridlines = 50)
cop_plot(cop, type="pdf", plot_type = "plotly", resolution = 100, n_gridlines =3)
cop_plot(cop, type="pdf", plot_type = "ggplot")
cop_plot(cop, type="pdf", plot_type = "ggplot", resolution = 200)
?rdens
?qdens
?rCopula
?pCopula
?cylcop
?cor_cyl
cor_cyl(traj$angle, traj$steplength)
library(dplyr)
theta<-traj$angle
attr(theta)
attributes(theta)
str(theta)
x<-traj$steplength
data.frame(theta, x)
data.frame(theta, x) %>% na.omit()
data.frame(theta, x) %>% na.omit() %>% dplyr::arrange(x)
data.frame(theta, x) %>% na.omit() %>% dplyr::arrange(x) %>%
mutate(r_theta = frank(.data$theta, ties.method = "average"))
data.frame(theta, x) %>% na.omit() %>% dplyr::arrange(x) %>%
mutate(r_theta = data.table::frank(.data$theta, ties.method = "average"))
data <- data.frame(theta, x) %>% na.omit() %>% dplyr::arrange(x) %>%
mutate(r_theta = data.table::frank(.data$theta, ties.method = "average"))
n <- nrow(data)
mutate(data, r_theta_star = .data$r_theta * 2 * pi / n)
data <- mutate(data, r_theta_star = .data$r_theta * 2 * pi / n) %>%
mutate(r_x = data.table::frank(.data$x, ties.method = "average"))
head(data)
dplyr::summarize(data, sum(.data$r_x * cos(.data$r_theta_star)))
dplyr::summarize(data, sum(.data$r_x * sin
(.data$r_theta_star)))
dplyr::summarize(data, sum(.data$r_x * sin
(.data$r_theta_star))) %>% as.double()
dplyr::summarize(data, sum(.data$r_x * cos(.data$r_theta_star))) %>% as.double()
C <- dplyr::summarize(data, sum(.data$r_x * cos(.data$r_theta_star))) %>% as.double()
S <- dplyr::summarize(data, sum(.data$r_x * sin
(.data$r_theta_star))) %>% as.double()
if (n %% 2 == 0) {
a <- 1 / (1 + 5 * (1 / tan(pi / n)) ^ 2 + 4 * (1 / tan(pi / n)) ^ 4)
}
lm_test <- lm(.data$r_x ~ cos(.data$r_theta_star) + sin(.data$r_theta_star), data = data)
head(data)
library(rlang)
lm_test <- lm(.data$r_x ~ cos(.data$r_theta_star) + sin(.data$r_theta_star), data = data)
lm_test <- lm(.data$r_x ~ cos(.data$r_theta_star) + sin(r_theta_star), data = data)
lm_test <- lm(.data$r_x ~ cos(r_theta_star) + sin(.data$r_theta_star), data = data)
lm_test <- lm(.data$r_x ~ cos(r_theta_star) + sin(r_theta_star), data = data)
lm_test <- lm(r_x ~ cos(r_theta_star) + sin(r_theta_star), data = data)
lm_test <- lm(r_x ~ cos(r_theta_star) + sin(r_theta_star), data = data)
reg_line <- data.frame(theta = seq(0, 2 * pi, 0.01))
reg_line <-
mutate(
reg_line,
x = as.double(coef(lm_test)[1]) + as.double(coef(lm_test)[2]) * cos(theta) +
as.double(coef(lm_test)[3]) * sin(theta)
)
p <- ggplot() +
geom_point(data = data, aes(x = .data$r_x, y = .data$r_theta_star)) +
geom_point(data = reg_line, aes(x = x, y = theta), color = "red") +
theme_bw() +
xlab("linear rank") +
ylab("circular rank") +
theme(
axis.title = element_text(size = 12, colour = "black"),
axis.text = element_text(size = 10, colour = "black"),
panel.border = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none"
)
library(ggplot2)
lm_test <- lm(r_x ~ cos(r_theta_star) + sin(r_theta_star), data = data)
reg_line <- data.frame(theta = seq(0, 2 * pi, 0.01))
reg_line <-
mutate(
reg_line,
x = as.double(coef(lm_test)[1]) + as.double(coef(lm_test)[2]) * cos(theta) +
as.double(coef(lm_test)[3]) * sin(theta)
)
p <- ggplot() +
geom_point(data = data, aes(x = .data$r_x, y = .data$r_theta_star)) +
geom_point(data = reg_line, aes(x = x, y = theta), color = "red") +
theme_bw() +
xlab("linear rank") +
ylab("circular rank") +
theme(
axis.title = element_text(size = 12, colour = "black"),
axis.text = element_text(size = 10, colour = "black"),
panel.border = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none"
)
plot(p)
remove.packages("cylcop")
getwd()
setwd("..")
library(devtools)
install(""cylcop)
install("cylcop")
library(cylcop)
copula<-cyl_rect_combine(claytonCopula(0.4))
library(copula)
copula<-cyl_rect_combine(claytonCopula(0.4))
copula
traj    <- make_traj(
10000,
copula = copula,
marginal_circ = "vonmises",
parameter_circ = list(0,1),
marginal_lin = "gamma",
parameter_lin = list(shape = 3)
)
traj_plot(traj)
cop_scat_plot(traj)
scat_plot(traj,periodic=TRUE)
circ_plot(traj)
?scat_plot
?cor_cyl
cor_cyl(traj$theta,traj$steplength)
cor_cyl(traj$angle,traj$steplength)
mi_binned(traj$angle,traj$steplength)
mi_binned(traj$angle,traj$steplength, symmetrize = T)
mi_binned(traj$angle,traj$steplength, symmetrize = F)
mi_binned(traj$angle,traj$steplength, normalize=F)
?mi_binned
?rwrappedcauchy()
dwrappedcauchy(c(0.4,-0.9), location = 0, scale = 1, K = 100)
pwrappedcauchy(c(0.4,-0.9), location = 0, scale = 1, K = 100)
pwrappedcauchy(c(0.4,-0.9), location = 0, scale = 1, K = 1000)
qwrappedcauchy(c(0.4,-0.9), location = 0, scale = 1, K = 1000)
qwrappedcauchy(c(0.4,4), location = 0, scale = 1, K = 1000)
qwrappedcauchy(c(0.4,0.9), location = 0, scale = 1, K = 1000)
qwrappedcauchy(c(0.4,0.001), location = 0, scale = 1, K = 1000)
qwrappedcauchy(c(0.4,0.03), location = 0, scale = 1, K = 1000)
temp<-qwrappedcauchy(c(0.4,0.03), location = 0, scale = 1, K = 1000)
temp
pwrappedcauchy(temp, location = 0, scale = 1, K = 1000)
p<-0.5
any(p<0.4)
if(any(p)<0 || any(p)>1){
stop(cylcop::error_sound(), "The entries of p must be between 0 and 1.")
}
if(any(p<0) || any(p>1)){
stop(cylcop::error_sound(), "The entries of p must be between 0 and 1.")
}
if(any(p<0) || any(p>1)){
stop(cylcop::error_sound(), "The entries of p must be between 0 and 1.")
}
p<- -2
if(any(p<0) || any(p>1)){
stop(cylcop::error_sound(), "The entries of p must be between 0 and 1.")
}
p<-2
if(any(p<0) || any(p>1)){
stop(cylcop::error_sound(), "The entries of p must be between 0 and 1.")
}
p<- c(0.4,0.1)
if(any(p<0) || any(p>1)){
stop(cylcop::error_sound(), "The entries of p must be between 0 and 1.")
}
p<- c(0.4,0.3,2)
if(any(p<0) || any(p>1)){
stop(cylcop::error_sound(), "The entries of p must be between 0 and 1.")
}
p<- c(0.4,0.3,-2)
if(any(p<0) || any(p>1)){
stop(cylcop::error_sound(), "The entries of p must be between 0 and 1.")
}
?prob
?optCor
?`optCor,cyl_cubsec-method`
optCor(copula = copula, theta = traj$angle, x = traj$steplength, method="mi")
copula
optCor(copula = copula, theta = traj$angle, x = traj$steplength, method="cor_cyl")
?circular::qvonmises()
library(devtools)
remove.packages("cylcop")
getwd()
setwd("..")
getwd()
devtools::install("cylcop")
install("cylcop")
remove.packages("cylcop")
getwd()
setwd("..")
library(devtools)
install("cylcop")
setwd("C:/Users/Flo/Documents/ETH/pop_eco/copula/pkg")
install("cylcop")
setwd("C:/Users/Flo/Documents/ETH/pop_eco/copula/pkg")
library(devtools)
install("cylcop")
library(cylcop)
library(copula)
done_sound()
copula <- cyl_vonmises(mu=0,kappa=2)
traj    <- cylcop::make_traj(
100,
copula = copula,
marginal_circ = "vonmises",
parameter_circ = list(0,1),
marginal_lin = "gamma",
parameter_lin = list(shape = 3)
)
traj
copula <- cyl_vonmises(mu=0,kappa=0)
traj    <- cylcop::make_traj(
100,
copula = copula,
marginal_circ = "vonmises",
parameter_circ = list(0,1),
marginal_lin = "gamma",
parameter_lin = list(shape = 3)
)
traj    <- cylcop::make_traj(
10000,
copula = copula,
marginal_circ = "vonmises",
parameter_circ = list(0,1),
marginal_lin = "gamma",
parameter_lin = list(shape = 3)
)
scat_plot(traj)
scat_plot(traj,periodic = T)
cop_plot(traj)
cop_scat_plot(traj)
t<-0.9999999
t==1
t<-0.99999999999
t==1
rCopula(1,COPULA)
rCopula(1,copula)
t
setwd("C:/Users/Flo/Documents/ETH/pop_eco/copula/pkg")
remove.packages("cylcop")
setwd("C:/Users/Flo/Documents/ETH/pop_eco/copula/pkg")
library(devtools)
install("cylcop")
remove.packages("cylcop")
setwd("C:/Users/Flo/Documents/ETH/pop_eco/copula/pkg")
library(devtools)
install("cylcop")
library(devtools)
getwd()
setwd("..")
install_github("floo66/cylcop")
file.exists("~/.ssh/id_rsa.pub")
